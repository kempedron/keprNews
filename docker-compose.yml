version: '3.8'  # Обновите версию

services:
  webapp:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis: # Добавляем зависимость от Redis
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: dbUser
      DB_PASSWORD: 123456
      DB_NAME: newDataBase
      REDIS_HOST: redis # Хост внутри сети Docker Compose - это имя сервиса
      REDIS_PORT: 6379
    restart: always
  db:
    image: postgres:14-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./create_db_and_user.sql:/docker-entrypoint-initdb.d/create_db_and_user.sql
    environment:
      POSTGRES_DB: newDataBase
      POSTGRES_USER: dbUser
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbUser -d newDataBase"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.4-alpine # Используется стабильный Alpine-образ
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=123456 # Установка пароля для подключения
      - REDIS_APPENDONLY=yes   # Включение持久化 для сохранения данных на диск:cite[5]
    volumes:
      - redis_data:/data # Сохранение данных Redis на хост-машине
    healthcheck: # Проверка здоровья контейнера
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  pgdata:
  redis_data: