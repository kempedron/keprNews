version: '3.8'

services:
  # Сервис аутентификации
  auth-service:
    build: 
      context: .
      dockerfile: ./cmd/auth-service/Dockerfile  # Путь к Dockerfile сервиса аутентификации
    env_file: 
    - .env
    ports:
      - "8081:8081"  # Пробрасываем порт для доступа к auth-service
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=dbUser
      - DB_PASSWORD=123456
      - DB_NAME=auth_db  # Для изоляции данных можно использовать отдельную БД
      - REDIS_URL=redis://:123456@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=8081
    restart: always
    networks:
      - news-network

  # Сервис статей
  article-service:
    build: 
      context: .
      dockerfile: ./cmd/article-service/Dockerfile  # Путь к Dockerfile сервиса статей
    env_file: 
    - .env
    ports:
      - "8082:8082"  # Пробрасываем порт для доступа к article-service
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=dbUser
      - DB_PASSWORD=123456
      - DB_NAME=article_db  # Для изоляции данных можно использовать отдельную БД
      - REDIS_URL=redis://:123456@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=8082
    restart: always
    networks:
      - news-network

  # API Gateway - единая точка входа
  api-gateway:
    build:
      context: .
      dockerfile: ./cmd/api-gateway/Dockerfile
    env_file: 
    - .env
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - article-service
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8081
      - ARTICLE_SERVICE_URL=http://article-service:8082
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=8080
    restart: always
    networks:
      - news-network

  # База данных PostgreSQL
  db:
    image: postgres:14-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Скрипты для создания нескольких БД
    environment:
      POSTGRES_MULTIPLE_DATABASES: auth_db,article_db
      POSTGRES_USER: dbUser
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    restart: always
    networks:
      - news-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbUser"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Redis для кеширования
  redis:
    image: redis:7.4-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=123456
      - REDIS_APPENDONLY=yes
    volumes:
      - redis_data:/data
    networks:
      - news-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "123456", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  pgdata:
  redis_data:

networks:
  news-network:
    driver: bridge